1.Department Create 
app.post('/departments', async (req, res) => {
  const department = new Department(req.body);

  try {
    const savedDepartment = await department.save();
    res.status(201).json(savedDepartment);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

Inserting documents in a table:
db.departments.insertOne(
  {
    "name": "Sales",
    "head": "John Doe"
  }
)


2.Department Update:
app.put('/departments/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const updatedDepartment = await Department.findByIdAndUpdate(
      id,
      req.body,
      { new: true }
    );
    res.status(200).json(updatedDepartment);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

3.Employee Create:
app.post('/employees', async (req, res) => {
  const employee = new Employee(req.body);

  try {
    const savedEmployee = await employee.save();
    res.status(201).json(savedEmployee);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

4.Employee Update:
app.put('/employees/:email', async (req, res) => {
  const { email } = req.params;

  try {
    const updatedEmployee = await Employee.findOneAndUpdate(
      { email },
      req.body,
      { new: true }
    );
    res.status(200).json(updatedEmployee);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

5.Employee Delete:
app.delete('/employees/:id', async (req, res) => {
  const { id } = req.params;

  try {
    await Employee.findByIdAndDelete(id);
    res.status(204).send();
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

6.Payout Upload:
const multer = require('multer');

const upload = multer({
  dest: 'uploads/',
  limits: {
    fileSize: 10000000 // limit file size to 10MB
  }
});

app.post('/payouts', upload.single('file'), async (req, res) => {
  const { file } = req;

  if (!file) {
    return res.status(400).json({ message: 'No file provided' });
  }

  const rows = file.buffer.toString().split('\n');
  rows.shift(); // remove the header row

  const payouts = [];

  for (const row of rows) {
    const [date, email, fixedAmount, variableAmount, deductions] = row.split(',');
    payouts.push({
      payoutDate: new Date(date),
      employee: { email },
      fixedAmount: parseFloat(fixedAmount),
      variableAmount: parseFloat(variableAmount),
      deductions: parseFloat(deductions)
    });
  }

  try {
    const savedPayouts = await Payout.insertMany(payouts);
    res.status(201).json(savedPayouts);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

Mongodb queries:-----

1.Get all Employees, with their department name and their Department Head Name:

db.employee.aggregate([
  {
    $lookup: {
      from: "department",
      localField: "department",
      foreignField: "_id",
      as: "department_docs"
    }
  },
  {
    $unwind: "$department_docs"
  },
  {
    $lookup: {
      from: "department",
      localField: "department_docs.deptHead",
      foreignField: "_id",
      as: "deptHead_docs"
    }
  },
  {
    $unwind: "$deptHead_docs"
  },
  {
    $project: {
      "_id": 1,
      "firstName": 1,
      "lastName": 1,
      "email": 1,
      "department": 1,
      "departmentName": "$department_docs.name",
      "deptHeadName": "$deptHead_docs.deptHead"
    }
  }
])


2.Get employees total payout for the year 2023:

db.payout.aggregate([
  {
    $match: {
      "payoutDate": {
        $gte: ISODate("2023-01-01"),
        $lte: ISODate("2023-12-31")
      }
    }
  },
  {
    $group: {
      _id: "$employee.email",
      totalPayout: {
        $sum: {
          $add: [
            "$fixedAmount",
            "$variableAmount"
          ]
        }
      },
      deductions: {
        $sum: "$deductions"
      }
    }
  },
  {
    $project: {
      "_id": 0,
      "email": "$_id",
      "totalPayout": 1,
      "netPayout": {
        $subtract: [
          "$totalPayout",
          "$deductions"
        ]
      }
    }
  }
])


3.Get Top employees who received the highest variableAmount for each month:

db.payout.aggregate([
  {
    $group: {
      _id: {
        email: "$employee.email",
        year: {
          $year: "$payoutDate"
        },
        month: {
          $month: "$payoutDate"
        }
      },
      totalVariableAmount: {
        $sum: "$variableAmount"
      }
    }
  },
  {
    $sort: {
      "totalVariableAmount": -1
    }
  },
  {
    $group: {
      _id: {
        year: "$_id.year",
        month: "$_id.month"
      },
      topEmployees: {
        $push: {
          email: "$_id.email",
          totalVariableAmount: "$totalVariableAmount"
        }
      }
    }
  },
  {
    $project: {
      "_id": 0,
      "year": "$_id.year",
      "month": "$_id.month",
      "topEmployees": 1
    }
  }
])


4.Get all employees who didn't get any payout for May 2023 and June 2023:

db.employee.find({
  "email": {
    $nin: [
      "employee_email_1",
      "employee_email_2",
      ...
    ]
  }
})
